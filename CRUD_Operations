Creating an ASP.NET MVC application that performs CRUD (Create, Read, Update, Delete) operations on a `book_info` table in a `book_master` database requires the following steps:

 Step 1: Set Up the Development Environment
1. Install Visual Studio with the ASP.NET and web development workload.
2. Ensure that SQL Server or SQL Server Express is installed.

 Step 2: Create the SQL Database
1. Open SQL Server Management Studio or use SQL Server in Visual Studio.
2. Run the following SQL script to create the database and table:

sql
CREATE DATABASE book_master;
GO
USE book_master;
GO
CREATE TABLE book_info (
    book_id INT PRIMARY KEY IDENTITY(1,1),
    book_name NVARCHAR(100) NOT NULL,
    author NVARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL
);

 Step 3: Create an ASP.NET MVC Application
1. Open Visual Studio.
2. Go to File > New > Project.
3. Select ASP.NET Web Application (.NET Framework) and name it `BookMasterApp`.
4. Choose MVC template and click Create.

 Step 4: Add Entity Framework and Data Model
1. Right-click the project in Solution Explorer.
2. Select Manage NuGet Packages, then search for and install EntityFramework.
3. Create a model class:
   - Right-click the Models folder.
   - Add a class called `BookInfo.cs` with the following code:

csharp
using System.ComponentModel.DataAnnotations;
namespace BookMasterApp.Models
{
    public class BookInfo
    {
        [Key]
        public int book_id { get; set; }

        [Required]
        public string book_name { get; set; }

        [Required]
        public string author { get; set; }

        [Required]
        [Range(1, 10000)]
        public decimal price { get; set; }
    }
}


4. Create a DbContext class:
   - Add a class called `BookMasterContext.cs`:

csharp
using System.Data.Entity;

namespace BookMasterApp.Models
{
    public class BookMasterContext : DbContext
    {
        public DbSet<BookInfo> Books { get; set; }
    }
}


5. Update the connection string in `Web.config`:

xml
<connectionStrings>
  <add name="BookMasterContext"
       connectionString="Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=book_master;Integrated Security=True"
       providerName="System.Data.SqlClient" />
</connectionStrings>





 Step 5: Create the Controller

1. Right-click the Controllers folder and select Add > Controller.
2. Choose MVC 5 Controller with views, using Entity Framework.
3. Select the BookInfo model and BookMasterContext.
4. Click Add. This will generate a CRUD controller named `BookInfoController`.

 Step 6: Views (Generated by Scaffolding)
The controller will automatically generate the following views:
- `Create.cshtml`
- `Edit.cshtml`
- `Delete.cshtml`
- `Details.cshtml`
- `Index.cshtml`

These views will be in the Views/BookInfo folder.

Step 7: Add Data Validation
1. In the `BookInfo.cs` model, we already added validation attributes like `[Required]` and `[Range]`. This will automatically enforce validation in the UI.
2. ASP.NET MVC will use Data Annotations for validating inputs before sending them to the server.


 Step 8: Implement Search Feature
1. In the `BookInfoController`, modify the `Index` action method to handle search functionality:
csharp
public ActionResult Index(string searchString)
{
    var books = from b in db.Books select b;

    if (!String.IsNullOrEmpty(searchString))
    {
        books = books.Where(b => b.book_name.Contains(searchString) || b.author.Contains(searchString));
    }

    return View(books.ToList());
}


2. Update the `Index.cshtml` view to add a search form at the top:

html
@using (Html.BeginForm("Index", "BookInfo", FormMethod.Get))
{
    <p>
        Search by Name or Author: @Html.TextBox("searchString")
        <input type="submit" value="Search" />
    </p>
}


---

 Step 9: Running and Testing

1. Build the solution (`Ctrl + Shift + B`).
2. Press F5 to run the application.
3. Use the forms to insert, view, search, edit, and delete book records.

---

 Step 10: Handling Errors and Validation in Views

The default views scaffolded will include validation logic using jQuery validation. You can further customize the validation messages or styles by editing the generated `.cshtml` files in the Views/BookInfo folder.

---

 Summary of Files

- Models/BookInfo.cs: Defines the structure of the `book_info` table.
- Models/BookMasterContext.cs: Provides database context using Entity Framework.
- Controllers/BookInfoController.cs: Handles CRUD operations.
- Views/BookInfo/*.cshtml: Contains views for CRUD and search functionality.

This should give you a fully functional ASP.NET MVC application for managing books. Let me know if you'd like further clarification or enhancements!
